import Foundation

// MARK: - Dependency injection container protocol

/// Интерфейс `DI`-контейнера для управления зависимостями.
protocol DIContainer: AnyObject, Sendable {
    
    // MARK: Functions
    
    /// Выполняет регистрацию зависимости в контейнере.
    /// - Parameters:
    ///   - type: тип регистрируемой зависимости.
    ///   - resolver: замыкание для создания экземпляра зависимости.
    /// - Returns: экземпляр зависимости (для построения цепочки вызовов).
    @discardableResult func register<Service>(_ type: Service.Type, _ resolver: @escaping (DIContainer) -> Service) -> DIService
    /// Выполняет регистрацию зависимости в контейнере.
    ///
    /// Позволяет передавать дополнительные параметры для зависимостей.
    /// - Parameters:
    ///   - type: тип регистрируемой зависимости.
    ///   - resolver: замыкание для создания экземпляра зависимости.
    /// - Returns: экземпляр зависимости (для построения цепочки вызовов).
    @discardableResult func register<Service, Arguments>(_ type: Service.Type, _ resolver: @escaping (DIContainer, Arguments) -> Service) -> DIService
    /// Выполняет получение экземпляра зарегистрированной в контейнере зависимости.
    ///
    /// Если зависимость не зарегистрирована или не может быть приведена к указанному типу
    /// выполняет вызов `fatalError` с соответствующим сообщением.
    /// - Parameters:
    ///   - type: тип запрашиваемой зависимости.
    ///   - args: дополнительные параметры зависимости.
    /// - Returns: экземпляр запрашиваемой зависимости.
    func resolve<T>(_ type: T.Type) -> T
    /// Выполняет получение экземпляра зарегистрированной в контейнере зависимости.
    ///
    /// Позволяет передавать дополнительные параметры для создания зависимостей.
    ///
    /// Если зависимость не зарегистрирована или не может быть приведена к указанному типу
    /// выполняет вызов `fatalError` с соответствующим сообщением.
    /// - Parameters:
    ///   - type: тип запрашиваемой зависимости.
    ///   - args: дополнительные параметры зависимости.
    /// - Returns: экземпляр запрашиваемой зависимости.
    func resolve<T, Arguments>(_ type: T.Type, args: Arguments) -> T
    /// Выполняет обновление регистрации зависимости в контейнере.
    /// - Parameter service: зависимость для которой необходимо обновить регистрацию.
    func updateRegistration(for service: DIService)
}
